@page "/options"
@inject CookieService CookieService
@inject Constants Constants

<PageTitle>Random Loadout Generator</PageTitle>

@if (cookieConsent)
{
    <h2>Press The Items To Exclude From Randomizer</h2>
    <br />

    <div class="items">
        <div class="item">
            <h1 class="itemHeader">Classes</h1>
            <div class="items">
                @if (selectedClasses != null)
                {
                    foreach (string item in Constants.Classes)
                    {
                        <ImageCheckbox ImagePath=@($"images/{item}.jpg") AltText=@item IsCheckedChanged=SelectClass IsChecked=@(selectedClasses.Contains(@item)) WhiteCross=true />
                    }
                }
            </div>
        </div>
    </div>

    <div class="build">
        <h1 class="itemHeader">Light</h1>
        <div class="items large-items">
            <div class="item">
                <h1 class="itemHeader">Specializations</h1>
                <div class="items">
                    @if (selectedSpecializations != null)
                    {
                        foreach (string item in Constants.LSpecializations)
                        {
                            <ImageCheckbox ImagePath=@($"images/{item}.png") AltText=@(item.Replace("_", " ")) IsCheckedChanged=SelectSpecialization IsChecked=@(selectedSpecializations.Contains(@item)) />
                        }
                    }
                </div>
            </div>
            <div class="item">
                <h1 class="itemHeader">Weapons</h1>
                <div class="items">
                    @if (selectedWeapons != null)
                    {
                        foreach (string item in Constants.LWeapons)
                        {
                            <ImageCheckbox ImagePath=@($"images/{item}.png") AltText=@(item.Replace("_", " ")) IsCheckedChanged=SelectWeapon IsChecked=@(selectedWeapons.Contains(@item)) />
                        }
                    }
                </div>
            </div>
            <div class="item">
                <h1 class="itemHeader">Gadgets</h1>
                <div class="items">
                    @if (selectedGadgets != null)
                    {
                        foreach (string item in Constants.LGadgets)
                        {
                            <ImageCheckbox ImagePath=@($"images/{item}.png") AltText=@(item.Replace("_", " ")) IsCheckedChanged=SelectGadget IsChecked=@(selectedGadgets.Contains(@item)) />
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="build">
        <h1 class="itemHeader">Medium</h1>
        <div class="items large-items">
            <div class="item">
                <h1 class="itemHeader">Specializations</h1>
                <div class="items">
                    @if (selectedSpecializations != null)
                    {
                        foreach (string item in Constants.MSpecializations)
                        {
                            <ImageCheckbox ImagePath=@($"images/{item}.png") AltText=@(item.Replace("_", " ")) IsCheckedChanged=SelectSpecialization IsChecked=@(selectedSpecializations.Contains(@item)) />
                        }
                    }
                </div>
            </div>
            <div class="item">
                <h1 class="itemHeader">Weapons</h1>
                <div class="items">
                    @if (selectedWeapons != null)
                    {
                        foreach (string item in Constants.MWeapons)
                        {
                            <ImageCheckbox ImagePath=@($"images/{item}.png") AltText=@(item.Replace("_", " ")) IsCheckedChanged=SelectWeapon IsChecked=@(selectedWeapons.Contains(@item)) />
                        }
                    }
                </div>
            </div>
            <div class="item">
                <h1 class="itemHeader">Gadgets</h1>
                <div class="items">
                    @if (selectedGadgets != null)
                    {
                        foreach (string item in Constants.MGadgets)
                        {
                            <ImageCheckbox ImagePath=@($"images/{item}.png") AltText=@(item.Replace("_", " ")) IsCheckedChanged=SelectGadget IsChecked=@(selectedGadgets.Contains(@item)) />
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="build">
        <h1 class="itemHeader">Heavy</h1>
        <div class="items large-items">
            <div class="item">
                <h1 class="itemHeader">Specializations</h1>
                <div class="items">
                    @if (selectedSpecializations != null)
                    {
                        foreach (string item in Constants.HSpecializations)
                        {
                            <ImageCheckbox ImagePath=@($"images/{item}.png") AltText=@(item.Replace("_", " ")) IsCheckedChanged=SelectSpecialization IsChecked=@(selectedSpecializations.Contains(@item)) />
                        }
                    }
                </div>
            </div>
            <div class="item">
                <h1 class="itemHeader">Weapons</h1>
                <div class="items">
                    @if (selectedWeapons != null)
                    {
                        foreach (string item in Constants.HWeapons)
                        {
                            <ImageCheckbox ImagePath=@($"images/{item}.png") AltText=@(item.Replace("_", " ")) IsCheckedChanged=SelectWeapon IsChecked=@(selectedWeapons.Contains(@item)) />
                        }
                    }
                </div>
            </div>
            <div class="item">
                <h1 class="itemHeader">Gadgets</h1>
                <div class="items">
                    @if (selectedGadgets != null)
                    {
                        foreach (string item in Constants.HGadgets)
                        {
                            <ImageCheckbox ImagePath=@($"images/{item}.png") AltText=@(item.Replace("_", " ")) IsCheckedChanged=SelectGadget IsChecked=@(selectedGadgets.Contains(@item)) />
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <h1>Accept Cookies To Change Options</h1>
}

@code {
    private bool cookieConsent = false;

    private List<string> selectedClasses = new List<string>();
    private List<string> selectedSpecializations = new List<string>();
    private List<string> selectedWeapons = new List<string>();
    private List<string> selectedGadgets = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        cookieConsent = await CookieService.GetCookie("cookieConsent") == "true";

        if (cookieConsent) {
            // Classes
            string cookie = await CookieService.GetCookie("classes");
            if (cookie != null) {
                selectedClasses = cookie.Split(",").ToList();
            } else {
                selectedClasses = new List<string>();
            }

            // Specializations
            string cookieSpecializations = await CookieService.GetCookie("specializations");
            if (cookieSpecializations != null) {
                selectedSpecializations = cookieSpecializations.Split(",").ToList();
            } else {
                selectedSpecializations = new List<string>();
            }

            // Weapons
            string cookieWeapons = await CookieService.GetCookie("weapons");
            if (cookieWeapons != null) {
                selectedWeapons = cookieWeapons.Split(",").ToList();
            } else {
                selectedWeapons = new List<string>();
            }

            // Gadgets
            string cookieGadgets = await CookieService.GetCookie("gadgets");
            if (cookieGadgets != null) {
                selectedGadgets = cookieGadgets.Split(",").ToList();
            } else {
                selectedGadgets = new List<string>();
            }
        }

        StateHasChanged();
    }

    private async Task SelectClass(string selectedClass) {
        selectedClass = selectedClass.Replace(" ", "_");
        if (selectedClasses.Contains(selectedClass)) {
            selectedClasses.Remove(selectedClass);
        } else {
            selectedClasses.Add(selectedClass);
        }

        await CookieService.SetCookie("classes", string.Join(",", selectedClasses));
    }

    private async Task SelectSpecialization(string selectedSpecialization) {
        selectedSpecialization = selectedSpecialization.Replace(" ", "_");
        if (selectedSpecializations.Contains(selectedSpecialization)) {
            selectedSpecializations.Remove(selectedSpecialization);
        } else {
            selectedSpecializations.Add(selectedSpecialization);
        }

        await CookieService.SetCookie("specializations", string.Join(",", selectedSpecializations));
    }

    private async Task SelectWeapon(string selectedWeapon) {
        selectedWeapon = selectedWeapon.Replace(" ", "_");
        if (selectedWeapons.Contains(selectedWeapon)) {
            selectedWeapons.Remove(selectedWeapon);
        } else {
            selectedWeapons.Add(selectedWeapon);
        }

        await CookieService.SetCookie("weapons", string.Join(",", selectedWeapons));
    }

    private async Task SelectGadget(string selectedGadget) {
        selectedGadget = selectedGadget.Replace(" ", "_");
        if (selectedGadgets.Contains(selectedGadget)) {
            selectedGadgets.Remove(selectedGadget);
        } else {
            selectedGadgets.Add(selectedGadget);
        }

        await CookieService.SetCookie("gadgets", string.Join(",", selectedGadgets));
    }
}
