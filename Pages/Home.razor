@page "/"
@inject CookieService CookieService
@inject Constants Constants

<PageTitle>Random Loadout Generator</PageTitle>

<div class="content">
    @if (selectedClass != "")
    {
        <div class="items" style="gap:2rem;">
            <div class="item">
                <h1 class="itemHeader">Build</h1>
                <ImageCheckbox ImagePath="images/placeholder.jpg" AltText=@selectedClass IsDisabled=true />
            </div>
            <div class="items">
                <div class="item">
                    <h1 class="itemHeader">Specialization</h1>
                    <ImageCheckbox ImagePath="images/placeholder.jpg" AltText=@selectedSpecialization IsDisabled=true />
                </div>
                <div class="item">
                    <h1 class="itemHeader">Weapon</h1>
                    <ImageCheckbox ImagePath="images/placeholder.jpg" AltText=@selectedWeapon IsDisabled=true />
                </div>
            </div>
            <div class="items">
                <div class="item">
                    <h1 class="itemHeader">Gadgets</h1>
                    <div class="items">
                        <ImageCheckbox ImagePath="images/placeholder.jpg" AltText=@selectedGadgets[0] IsDisabled=true />
                        <ImageCheckbox ImagePath="images/placeholder.jpg" AltText=@selectedGadgets[1] IsDisabled=true />
                        <ImageCheckbox ImagePath="images/placeholder.jpg" AltText=@selectedGadgets[2] IsDisabled=true />
                    </div>
                </div>
            </div>
        </div>
    }
    <div style="height:4rem;" />

    <button class="generateButton" @onclick="GenerateRandomLoadout">Generate Random Loadout</button>
</div>

@code {
    private string selectedClass = "";
    private string selectedSpecialization = "";
    private string selectedWeapon = "";
    private List<string> selectedGadgets = new List<string>();

    private List<string> classes = new List<string>();

    private List<string> lSpecializations = new List<string>();
    private List<string> mSpecializations = new List<string>();
    private List<string> hSpecializations = new List<string>();

    private List<string> lWeapons = new List<string>();
    private List<string> mWeapons = new List<string>();
    private List<string> hWeapons = new List<string>();

    private List<string> lGadgets = new List<string>();
    private List<string> mGadgets = new List<string>();
    private List<string> hGadgets = new List<string>();

    private async Task GenerateRandomLoadout()
    {
        Random random = new Random();

        await ParseCookies();

        selectedClass = classes[random.Next(0, classes.Count)];

        if (selectedClass == "Light")
        {
            selectedSpecialization = lSpecializations[random.Next(0, lSpecializations.Count)];
            selectedWeapon = lWeapons[random.Next(0, lWeapons.Count)];
            selectedGadgets = GetRandomItems(lGadgets, 3);
        }
        else if (selectedClass == "Medium")
        {
            selectedSpecialization = mSpecializations[random.Next(0, mSpecializations.Count)];
            selectedWeapon = mWeapons[random.Next(0, mWeapons.Count)];
            selectedGadgets = GetRandomItems(mGadgets, 3);
        }
        else if (selectedClass == "Heavy")
        {
            selectedSpecialization = hSpecializations[random.Next(0, hSpecializations.Count)];
            selectedWeapon = hWeapons[random.Next(0, hWeapons.Count)];
            selectedGadgets = GetRandomItems(hGadgets, 3);
        }
    }

    private List<string> GetRandomItems(List<string> items, int count) {
        Random random = new Random();
        List<string> randomItems = new List<string>();
        for (int i = 0; i < count; i++)
        {
            string item = items[random.Next(0, items.Count)];
            while (randomItems.Contains(item))
            {
                item = items[random.Next(0, items.Count)];
            }
            randomItems.Add(items[random.Next(0, items.Count)]);
        }
        return randomItems;
    }

    private async Task ParseCookies() {
        string cookie;

        // Classes
        cookie = await CookieService.GetCookie("classes");
        classes = new List<string>(Constants.classTypes);
        if (cookie != null)
        {
            List<string> selectedClasses = cookie.Split(',').ToList();
            foreach (string item in selectedClasses)
            {
                classes.Remove(item);
            }
        }

        // Specializations
        cookie = await CookieService.GetCookie("specializations");
        lSpecializations = new List<string>(Constants.lSpecializationTypes);
        mSpecializations = new List<string>(Constants.mSpecializationTypes);
        hSpecializations = new List<string>(Constants.hSpecializationTypes);
        if (cookie != null)
        {
            List<string> selectedSpecializations = cookie.Split(',').ToList();
            foreach (string item in selectedSpecializations)
            {
                lSpecializations.Remove(item);
                mSpecializations.Remove(item);
                hSpecializations.Remove(item);
            }
        }

        // Weapons
        cookie = await CookieService.GetCookie("weapons");
        lWeapons = new List<string>(Constants.lWeaponTypes);
        mWeapons = new List<string>(Constants.mWeaponTypes);
        hWeapons = new List<string>(Constants.hWeaponTypes);
        if (cookie != null)
        {
            List<string> selectedWeapons = cookie.Split(',').ToList();
            foreach (string item in selectedWeapons)
            {
                lWeapons.Remove(item);
                mWeapons.Remove(item);
                hWeapons.Remove(item);
            }
        }

        // Gadgets
        cookie = await CookieService.GetCookie("gadgets");
        lGadgets = new List<string>(Constants.lGadgetTypes);
        mGadgets = new List<string>(Constants.mGadgetTypes);
        hGadgets = new List<string>(Constants.hGadgetTypes);
        if (cookie != null)
        {
            List<string> selectedGadgets = cookie.Split(',').ToList();
            foreach (string item in selectedGadgets)
            {
                lGadgets.Remove(item);
                mGadgets.Remove(item);
                hGadgets.Remove(item);
            }
        }
    }
}
